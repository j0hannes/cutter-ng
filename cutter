#!/usr/bin/env python3
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 colorcolumn=80
#     ______________________________________ ______________________
#     \                                     | (_)     (_)    (_)   \
#      `.  http://pub.cl.uzh.ch/purl/cutter |  __________________   }
#        `-.............................____|_(                  )_/
#

import os
import sys
import argparse
import regex
import Cutter

#assert sys.version_info >= (3,6)
dir_path = os.path.dirname(os.path.realpath(__file__))

profiles = {
    'ca': ('Catalan', '-r {0}/rule/common.yaml {0}/rule/ca.yaml '
          '-a {0}/abbr/ca.list -i {0}/init/ca.list'.format(dir_path)),
    'de': ('German', '-r {0}/rule/common.yaml {0}/rule/de.yaml '
          '-a {0}/abbr/de.list -i {0}/init/de.list'.format(dir_path)),
    'en': ('English', '-r {0}/rule/common.yaml {0}/rule/en.yaml '
          '-a {0}/abbr/en.list -i {0}/init/en.list'.format(dir_path)),
    'es': ('Spanish', '-r {0}/rule/common.yaml {0}/rule/es.yaml '
          '-a {0}/abbr/es.list -i {0}/init/es.list'.format(dir_path)),
    'fr': ('French', '-r {0}/rule/common.yaml {0}/rule/fr.yaml '
          '-a {0}/abbr/fr.list -i {0}/init/fr.list'.format(dir_path)),
    'it': ('Italian', '-r {0}/rule/common.yaml {0}/rule/it.yaml '
          '-a {0}/abbr/it.list -i {0}/init/it.list'.format(dir_path)),
    'nl': ('Dutch', '-r {0}/rule/common.yaml {0}/rule/nl.yaml '
          '-a {0}/abbr/nl.list -i {0}/init/nl.list'.format(dir_path)),
    'pt': ('Portuguese', '-r {0}/rule/common.yaml {0}/rule/pt.yaml '
          '-a {0}/abbr/pt.list -i {0}/init/pt.list'.format(dir_path)),
    'rm': ('Romansh', '-r {0}/rule/common.yaml {0}/rule/rm.yaml '
          '-a {0}/abbr/rm.list -i {0}/init/rm.list'.format(dir_path)),
    'ro': ('Romanian', '-r {0}/rule/common.yaml {0}/rule/ro.yaml '
          '-a {0}/abbr/ro.list -i {0}/init/ro.list'.format(dir_path)),
    'sv': ('Swedish', '-r {0}/rule/common.yaml {0}/rule/sv.yaml '
          '-a {0}/abbr/sv.list -i {0}/init/sv.list'.format(dir_path)),
}


def main(argv):
    parser = argparse.ArgumentParser(
        description='Tokenize using language models.',
        formatter_class=argparse.RawTextHelpFormatter,
        epilog='alternative usage: %(prog)s profile\n\nprofiles:\n  {}'.format(
            '\n  '.join(sorted('{}: {}'.format(
                s, profiles[s][0]) for s in profiles.keys()))))
    parser.add_argument(
        '-v', '--verbose',
        action='count', default=0, help='be more verbose')
    parser.add_argument(
        '-a', '--abbr',
        nargs='*',
        type=argparse.FileType('r'),
        help='use abbreviation list')
    parser.add_argument(
        '-i', '--init',
        nargs='*',
        type=argparse.FileType('r'),
        help='use list of sentence-initial words')
    parser.add_argument(
        '-r', '--rule',
        nargs='*',
        type=argparse.FileType('r'),
        help='use ruleset')
    parser.add_argument(
        '-t', '--text',
        nargs='?',
        type=argparse.FileType('r'), default=sys.stdin,
        help='read from a file (default: stdin)')
    parser.add_argument(
        '-w', '--whitespace-tokens',
        action='store_true',
        dest='wt',
        help='return whitespace tokens')
    parser.add_argument(
        '-E', '--no-empty-tokens',
        action='store_false',
        dest='et',
        help='suppress empty tokens')
    parser.add_argument(
        '-T', '--no-tokenizer-tags',
        action='store_false',
        dest='tt',
        help='suppress tokenizer tags')
    parser.add_argument(
        '-c', '--cache',
        help='load model from cache (if available)')

    if not len(argv):
        parser.print_help()
        exit(1)

    if argv[0] in profiles:
        argv = profiles[argv[0]][1].split(' ') + argv[1:]
    args = parser.parse_args(args=argv)

    cutter = Cutter.Cutter(verbosity=args.verbose)
    if args.abbr is not None:
        for file in args.abbr:
            cutter.add_abbrs(file)
    if args.init is not None:
        for file in args.init:
            cutter.add_inits(file)
    if args.rule is not None:
        for file in args.rule:
            cutter.add_rules(file)
    cutter.compile()

    flags = (args.wt * Cutter.WHITESPACE_TOKENS + args.et * Cutter.EMPTY_TOKENS
             + args.tt * Cutter.TOKENIZATION_TAGS)
    for line in args.text:
        tokens = cutter.cut(line, flags)
        for token in tokens:
            if args.tt:
                print('{}\t{}'.format(token[0], token[1]))
            else:
                print('{}'.format(token))
        if args.tt and args.et:
            print('+NL\t')
        else:
            print()


if __name__ == '__main__':
    main(sys.argv[1:])


